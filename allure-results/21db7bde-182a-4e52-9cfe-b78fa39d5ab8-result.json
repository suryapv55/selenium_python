{"name": "test_logo", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 131\nCurrent browser version is 134.0.6998.166 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\n\tGetHandleVerifier [0x00007FF64A006CC5+28821]\n\t(No symbol) [0x00007FF649F73850]\n\t(No symbol) [0x00007FF649E1578A]\n\t(No symbol) [0x00007FF649E574C2]\n\t(No symbol) [0x00007FF649E5652B]\n\t(No symbol) [0x00007FF649E50469]\n\t(No symbol) [0x00007FF649E4BAC9]\n\t(No symbol) [0x00007FF649E9A4FA]\n\t(No symbol) [0x00007FF649E99B30]\n\t(No symbol) [0x00007FF649E8F0A3]\n\t(No symbol) [0x00007FF649E5A778]\n\t(No symbol) [0x00007FF649E5B8E1]\n\tGetHandleVerifier [0x00007FF64A33FCCD+3408029]\n\tGetHandleVerifier [0x00007FF64A35743F+3504143]\n\tGetHandleVerifier [0x00007FF64A34B61D+3455469]\n\tGetHandleVerifier [0x00007FF64A0CBDCB+835995]\n\t(No symbol) [0x00007FF649F7EB6F]\n\t(No symbol) [0x00007FF649F7A824]\n\t(No symbol) [0x00007FF649F7A9BD]\n\t(No symbol) [0x00007FF649F6A1A9]\n\tBaseThreadInitThunk [0x00007FFEDC88259D+29]\n\tRtlUserThreadStart [0x00007FFEDE08AF38+40]", "trace": "self = <test_rep.TestHRM object at 0x0000023F2D05EDE0>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_logo(self):\n        \"\"\"Test to check if the OrangeHRM logo is displayed.\"\"\"\n>       self.driver = webdriver.Chrome()\n\ntest_rep.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:241: in __init__\n    self.start_session(capabilities)\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:329: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023F2B7371D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF649F6A1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEDC88259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFEDE08AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 131\nE       Current browser version is 134.0.6998.166 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF64A006CC5+28821]\nE       \t(No symbol) [0x00007FF649F73850]\nE       \t(No symbol) [0x00007FF649E1578A]\nE       \t(No symbol) [0x00007FF649E574C2]\nE       \t(No symbol) [0x00007FF649E5652B]\nE       \t(No symbol) [0x00007FF649E50469]\nE       \t(No symbol) [0x00007FF649E4BAC9]\nE       \t(No symbol) [0x00007FF649E9A4FA]\nE       \t(No symbol) [0x00007FF649E99B30]\nE       \t(No symbol) [0x00007FF649E8F0A3]\nE       \t(No symbol) [0x00007FF649E5A778]\nE       \t(No symbol) [0x00007FF649E5B8E1]\nE       \tGetHandleVerifier [0x00007FF64A33FCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF64A35743F+3504143]\nE       \tGetHandleVerifier [0x00007FF64A34B61D+3455469]\nE       \tGetHandleVerifier [0x00007FF64A0CBDCB+835995]\nE       \t(No symbol) [0x00007FF649F7EB6F]\nE       \t(No symbol) [0x00007FF649F7A824]\nE       \t(No symbol) [0x00007FF649F7A9BD]\nE       \t(No symbol) [0x00007FF649F6A1A9]\nE       \tBaseThreadInitThunk [0x00007FFEDC88259D+29]\nE       \tRtlUserThreadStart [0x00007FFEDE08AF38+40]\n\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException"}, "description": "Test to check if the OrangeHRM logo is displayed.", "attachments": [{"name": "log", "source": "daf8efbc-089d-45bf-ae36-2c2f288bcf87-attachment.txt", "type": "text/plain"}], "start": 1743161142357, "stop": 1743161146731, "uuid": "6285b5f0-4d35-47e0-aa16-5eee921a4f2b", "historyId": "f26b05a13ba466235117e1fa667e2e23", "testCaseId": "f26b05a13ba466235117e1fa667e2e23", "fullName": "test_rep.TestHRM#test_logo", "labels": [{"name": "severity", "value": "normal"}, {"name": "suite", "value": "test_rep"}, {"name": "subSuite", "value": "TestHRM"}, {"name": "host", "value": "DESKTOP-LIFTNJ8"}, {"name": "thread", "value": "35924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_rep"}]}